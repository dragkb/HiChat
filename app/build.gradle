apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

//// fork dependency
//buildscript {
//    dependencies {
//        classpath 'com.shazam.fork:fork-gradle-plugin:3.6.0'
//    }
//}
//
//apply plugin: 'com.shazam.fork'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.alex.hichat"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    // Espresso dependencies
    implementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    // volley API dependency for JSON requests // the word "compile" changed on to "api" because it is deprecated
    api 'com.android.volley:volley:1.1.1'
    // SocketIO dependencies
    api ('io.socket:socket.io-client:1.0.0') {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }
}

//fork {
//    title = "Espresso tests"
//    testPackage = "com.example.tests"
//    fallbackToScreenshots = true
//    poolingStrategy {
//        computed {
//            characteristic = "sw"
//            groups {
//                allDevices = 0
//            }
//        }
//    }
//}
repositories {
    jcenter()
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.26.0"
    // additional 3rd party ruleset(s) can be specified here
    // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
    // ktlint will pick them up
    ktlint "me.cassiano:ktlint-html-reporter:0.1.2"
}

def inputFiles = project.fileTree(dir: "src", include: "**/*.kt")
def outputDir = "${project.buildDir}/reports/ktlint/"
def outputFile = "${outputDir}ktlint.html"
task ktlint(type: JavaExec, group: "verification") {
    // https://medium.com/@vanniktech/making-your-gradle-tasks-incremental-7f26e4ef09c3
    inputs.files(inputFiles)
    outputs.dir(outputDir)

    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args = [
            "--reporter=plain",
            "--reporter=html,artifact=me.cassiano:ktlint-html-reporter,output=${outputFile}",
            "--android",
            "src/**/*.kt"
    ]
}

afterEvaluate {
    check.dependsOn ktlint
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}
